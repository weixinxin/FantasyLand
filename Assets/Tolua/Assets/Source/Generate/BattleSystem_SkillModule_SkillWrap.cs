//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BattleSystem_SkillModule_SkillWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(BattleSystem.SkillModule.Skill), typeof(System.Object));
		L.RegFunction("Cast", Cast);
		L.RegFunction("Abort", Abort);
		L.RegFunction("OnSkillOver", OnSkillOver);
		L.RegFunction("Update", Update);
		L.RegFunction("New", _CreateBattleSystem_SkillModule_Skill);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Owner", get_Owner, null);
		L.RegVar("ID", get_ID, null);
		L.RegVar("TemplateID", get_TemplateID, null);
		L.RegVar("Desc", get_Desc, null);
		L.RegVar("Cost", get_Cost, null);
		L.RegVar("CD", get_CD, null);
		L.RegVar("Duration", get_Duration, null);
		L.RegVar("Level", get_Level, null);
		L.RegVar("AutoCast", get_AutoCast, null);
		L.RegVar("Status", get_Status, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateBattleSystem_SkillModule_Skill(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				BattleSystem.ObjectModule.UnitBase arg0 = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				BattleSystem.SkillModule.Skill obj = new BattleSystem.SkillModule.Skill(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				BattleSystem.ObjectModule.UnitBase arg0 = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				BattleSystem.SkillModule.Skill obj = new BattleSystem.SkillModule.Skill(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: BattleSystem.SkillModule.Skill.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Cast(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)ToLua.CheckObject<BattleSystem.SkillModule.Skill>(L, 1);
				obj.Cast();
				return 0;
			}
			else if (count == 2)
			{
				BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)ToLua.CheckObject<BattleSystem.SkillModule.Skill>(L, 1);
				BattleSystem.ObjectModule.UnitBase arg0 = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 2);
				obj.Cast(arg0);
				return 0;
			}
			else if (count == 3)
			{
				BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)ToLua.CheckObject<BattleSystem.SkillModule.Skill>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				obj.Cast(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: BattleSystem.SkillModule.Skill.Cast");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Abort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)ToLua.CheckObject<BattleSystem.SkillModule.Skill>(L, 1);
			obj.Abort();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSkillOver(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)ToLua.CheckObject<BattleSystem.SkillModule.Skill>(L, 1);
			obj.OnSkillOver();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)ToLua.CheckObject<BattleSystem.SkillModule.Skill>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Update(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Owner(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)o;
			BattleSystem.ObjectModule.UnitBase ret = obj.Owner;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Owner on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)o;
			int ret = obj.ID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TemplateID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)o;
			int ret = obj.TemplateID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TemplateID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Desc(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)o;
			string ret = obj.Desc;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Desc on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Cost(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)o;
			int ret = obj.Cost;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Cost on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CD(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)o;
			float ret = obj.CD;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CD on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Duration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)o;
			float ret = obj.Duration;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Duration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Level(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)o;
			int ret = obj.Level;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Level on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AutoCast(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)o;
			bool ret = obj.AutoCast;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AutoCast on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Status(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.SkillModule.Skill obj = (BattleSystem.SkillModule.Skill)o;
			BattleSystem.SkillModule.SkillStatus ret = obj.Status;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Status on a nil value");
		}
	}
}

