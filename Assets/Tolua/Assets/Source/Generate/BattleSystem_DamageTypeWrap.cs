//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BattleSystem_DamageTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(BattleSystem.DamageType));
		L.RegVar("kPhysical", get_kPhysical, null);
		L.RegVar("kMagic", get_kMagic, null);
		L.RegVar("kTrue", get_kTrue, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<BattleSystem.DamageType>.Check = CheckType;
		StackTraits<BattleSystem.DamageType>.Push = Push;
	}

	static void Push(IntPtr L, BattleSystem.DamageType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(BattleSystem.DamageType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_kPhysical(IntPtr L)
	{
		ToLua.Push(L, BattleSystem.DamageType.kPhysical);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_kMagic(IntPtr L)
	{
		ToLua.Push(L, BattleSystem.DamageType.kMagic);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_kTrue(IntPtr L)
	{
		ToLua.Push(L, BattleSystem.DamageType.kTrue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		BattleSystem.DamageType o = (BattleSystem.DamageType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

