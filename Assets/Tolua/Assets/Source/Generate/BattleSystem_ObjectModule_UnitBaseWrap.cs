//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class BattleSystem_ObjectModule_UnitBaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(BattleSystem.ObjectModule.UnitBase), typeof(System.Object));
		L.RegFunction("AddHP", AddHP);
		L.RegFunction("LostHP", LostHP);
		L.RegFunction("OnDead", OnDead);
		L.RegFunction("Update", Update);
		L.RegFunction("addExpectedDamage", addExpectedDamage);
		L.RegFunction("removeExpectedDamage", removeExpectedDamage);
		L.RegFunction("InAttackRange", InAttackRange);
		L.RegFunction("InVisualRange", InVisualRange);
		L.RegFunction("New", _CreateBattleSystem_ObjectModule_UnitBase);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Shield", get_Shield, set_Shield);
		L.RegVar("Animator", get_Animator, null);
		L.RegVar("ID", get_ID, null);
		L.RegVar("TemplateID", get_TemplateID, null);
		L.RegVar("position", get_position, set_position);
		L.RegVar("HP", get_HP, null);
		L.RegVar("Level", get_Level, null);
		L.RegVar("MaxHP", get_MaxHP, set_MaxHP);
		L.RegVar("IsDead", get_IsDead, null);
		L.RegVar("ATK", get_ATK, set_ATK);
		L.RegVar("MoveSpeed", get_MoveSpeed, set_MoveSpeed);
		L.RegVar("AttackDuration", get_AttackDuration, set_AttackDuration);
		L.RegVar("AttackRange", get_AttackRange, set_AttackRange);
		L.RegVar("VisualRange", get_VisualRange, set_VisualRange);
		L.RegVar("CampID", get_CampID, set_CampID);
		L.RegVar("AttackTarget", get_AttackTarget, set_AttackTarget);
		L.RegVar("Bullet", get_Bullet, null);
		L.RegVar("isAttackMiss", get_isAttackMiss, null);
		L.RegVar("isMagicDamageImmunity", get_isMagicDamageImmunity, null);
		L.RegVar("isNotarget", get_isNotarget, null);
		L.RegVar("isPhysicalDamageImmunity", get_isPhysicalDamageImmunity, null);
		L.RegVar("isUnableAttack", get_isUnableAttack, null);
		L.RegVar("isUnableCast", get_isUnableCast, null);
		L.RegVar("isUnmovable", get_isUnmovable, null);
		L.RegVar("isDeathless", get_isDeathless, null);
		L.RegVar("isNegativeEffectImmunity", get_isNegativeEffectImmunity, null);
		L.RegVar("isDying", get_isDying, null);
		L.RegVar("speed", get_speed, set_speed);
		L.RegVar("acceleration", get_acceleration, null);
		L.RegVar("radius", get_radius, set_radius);
		L.RegVar("Controller", get_Controller, null);
		L.RegVar("BehaviorTree", get_BehaviorTree, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateBattleSystem_ObjectModule_UnitBase(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				BattleSystem.ObjectModule.UnitBase obj = new BattleSystem.ObjectModule.UnitBase();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 4)
			{
				BattleSystem.SpaceModule.WorldSpace arg0 = (BattleSystem.SpaceModule.WorldSpace)ToLua.CheckObject<BattleSystem.SpaceModule.WorldSpace>(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				BattleSystem.ObjectModule.UnitBase obj = new BattleSystem.ObjectModule.UnitBase(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: BattleSystem.ObjectModule.UnitBase.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddHP(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			BattleSystem.ObjectModule.UnitBase arg1 = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 3);
			obj.AddHP(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LostHP(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			BattleSystem.ObjectModule.UnitBase arg1 = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 3);
			BattleSystem.DamageType arg2 = (BattleSystem.DamageType)ToLua.CheckObject(L, 4, typeof(BattleSystem.DamageType));
			bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
			obj.LostHP(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDead(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 1);
			obj.OnDead();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			bool o = obj.Update(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addExpectedDamage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.addExpectedDamage(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeExpectedDamage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.removeExpectedDamage(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InAttackRange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 1);
			BattleSystem.ObjectModule.UnitBase arg0 = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 2);
			bool o = obj.InAttackRange(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InVisualRange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 1);
			BattleSystem.ObjectModule.UnitBase arg0 = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 2);
			bool o = obj.InVisualRange(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Shield(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.Shield ret = obj.Shield;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Shield on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Animator(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.AnimatorController ret = obj.Animator;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Animator on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			int ret = obj.ID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TemplateID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			int ret = obj.TemplateID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TemplateID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.vector3 ret = obj.position;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			int ret = obj.HP;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HP on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Level(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			int ret = obj.Level;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Level on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxHP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			int ret = obj.MaxHP;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxHP on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsDead(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			bool ret = obj.IsDead;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsDead on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ATK(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.Attribute ret = obj.ATK;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ATK on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MoveSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.Attribute ret = obj.MoveSpeed;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MoveSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AttackDuration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.AttackDuration ret = obj.AttackDuration;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AttackDuration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AttackRange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.DistanceAttribute ret = obj.AttackRange;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AttackRange on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VisualRange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.DistanceAttribute ret = obj.VisualRange;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index VisualRange on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CampID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			int ret = obj.CampID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CampID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AttackTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.UnitBase ret = obj.AttackTarget;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AttackTarget on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Bullet(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			int ret = obj.Bullet;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Bullet on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isAttackMiss(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			bool ret = obj.isAttackMiss;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isAttackMiss on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isMagicDamageImmunity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			bool ret = obj.isMagicDamageImmunity;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isMagicDamageImmunity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isNotarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			bool ret = obj.isNotarget;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isNotarget on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isPhysicalDamageImmunity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			bool ret = obj.isPhysicalDamageImmunity;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isPhysicalDamageImmunity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isUnableAttack(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			bool ret = obj.isUnableAttack;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isUnableAttack on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isUnableCast(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			bool ret = obj.isUnableCast;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isUnableCast on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isUnmovable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			bool ret = obj.isUnmovable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isUnmovable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isDeathless(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			bool ret = obj.isDeathless;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isDeathless on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isNegativeEffectImmunity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			bool ret = obj.isNegativeEffectImmunity;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isNegativeEffectImmunity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isDying(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			bool ret = obj.isDying;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isDying on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_speed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			float ret = obj.speed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index speed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_acceleration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			float ret = obj.acceleration;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index acceleration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_radius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			float ret = obj.radius;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radius on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Controller(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.UnitController ret = obj.Controller;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Controller on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BehaviorTree(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.BehaviorTree.BehaviorTreeBase ret = obj.BehaviorTree;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BehaviorTree on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Shield(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.Shield arg0 = (BattleSystem.ObjectModule.Shield)ToLua.CheckObject<BattleSystem.ObjectModule.Shield>(L, 2);
			obj.Shield = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Shield on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.vector3 arg0 = StackTraits<BattleSystem.vector3>.Check(L, 2);
			obj.position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaxHP(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MaxHP = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaxHP on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ATK(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.Attribute arg0 = (BattleSystem.ObjectModule.Attribute)ToLua.CheckObject<BattleSystem.ObjectModule.Attribute>(L, 2);
			obj.ATK = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ATK on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MoveSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.Attribute arg0 = (BattleSystem.ObjectModule.Attribute)ToLua.CheckObject<BattleSystem.ObjectModule.Attribute>(L, 2);
			obj.MoveSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MoveSpeed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AttackDuration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.AttackDuration arg0 = (BattleSystem.ObjectModule.AttackDuration)ToLua.CheckObject<BattleSystem.ObjectModule.AttackDuration>(L, 2);
			obj.AttackDuration = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AttackDuration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AttackRange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.DistanceAttribute arg0 = (BattleSystem.ObjectModule.DistanceAttribute)ToLua.CheckObject<BattleSystem.ObjectModule.DistanceAttribute>(L, 2);
			obj.AttackRange = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AttackRange on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_VisualRange(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.DistanceAttribute arg0 = (BattleSystem.ObjectModule.DistanceAttribute)ToLua.CheckObject<BattleSystem.ObjectModule.DistanceAttribute>(L, 2);
			obj.VisualRange = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index VisualRange on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CampID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.CampID = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CampID on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AttackTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			BattleSystem.ObjectModule.UnitBase arg0 = (BattleSystem.ObjectModule.UnitBase)ToLua.CheckObject<BattleSystem.ObjectModule.UnitBase>(L, 2);
			obj.AttackTarget = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AttackTarget on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_speed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.speed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index speed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_radius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			BattleSystem.ObjectModule.UnitBase obj = (BattleSystem.ObjectModule.UnitBase)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.radius = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index radius on a nil value");
		}
	}
}

